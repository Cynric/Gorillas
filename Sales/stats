#! /usr/bin/env bash
# ___________________________________________________________________________ #
#                                                                             #
#       Stats -- Visualize iTunes sales data.                                 #
#                                                                             #
#                                                                             #
#    Licensed under the Apache License, Version 2.0 (the "License");          #
#    you may not use this file except in compliance with the License.         #
#    You may obtain a copy of the License at                                  #
#                                                                             #
#        http://www.apache.org/licenses/LICENSE-2.0                           #
#                                                                             #
#    Unless required by applicable law or agreed to in writing, software      #
#    distributed under the License is distributed on an "AS IS" BASIS,        #
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
#    See the License for the specific language governing permissions and      #
#    limitations under the License.                                           #
# ___________________________________________________________________________ #
#                                                                             #
#                                                                             #
# Copyright 2009, lhunath                                                     #
#   * http://lhunath.lyndir.com                                               #
#   * Maarten Billemont.                                                      #
#                                                                             #
source bashlib                                                                #

countryCodes=()
countryUnits=()
countryRoyalties=()
countryCurrencies=()
currencyNames=()
currencyCodes=()
currencyUnits=()
currencyRoyalties=()
fromEurs=()
toEurs=()
appIds=()
days=()
royalties=()

upgrades=
sales=

emit "Reading sales reports" --
    data=$(grep -hv '^Provider' "${0%/*}"/Reports/*/*.txt)
    while IFS=$'\t' read _ _ appId _; do
        for appIdExist in "${appIds[@]}"; do
            [[ $appId = $appIdExist ]] && {
                appId=
                break
            }
        done

        [[ $appId ]] && appIds+=("$appId") || true
    done <<< "$data"
emit -$? || exit

(( ${#appIds[@]} )) || {
    emit -r "No applications found."
    exit 1
}

emit "Found App IDs:"
for i in ${!appIds[@]}; do
    emit "$i."$'\t'"${appIds[i]}"
done
if (( ${#appIds[@]} > 1 )); then
    until i=$(ask +0 "Which application would you like to generate a report for?") && [[ $i && $i != *[^0-9]* && ${appIds[i]} ]]; do
        emit -y "Please enter a valid number."
    done
    appIdFilter=${appIds[i]}
else
    appIdFilter=$appIds
fi

emit "Reading currency conversions" --
    while IFS=, read currencyName currencyCode toEur fromEur; do
        currencyNames+=("$currencyName")
        currencyCodes+=("$currencyCode")
        fromEurs+=("$fromEur")
        toEurs+=("$toEur")
    done < "${0%/*}/currencies"
emit -$? || exit

read entries _ < <(wc -l <<< "$data")
entry=0
day=-1

emit "Parsing reports"; printf "$save"
    while IFS=$'\t' read provider providerCountry appId upc isrc author title label type _units _royalty begin end currency country royaltyCurrency preorder seasonpass isan appleid _price cma asset venderCode grid promoCode parentId; do

        # Progress indicator.
        (( ++entry ))
        printf "$load\r\t- %d / %d (%d%%)" "$entry" "$entries" "$((entry * 100 / entries))"
        data=(  provider        "$provider"
                providerCountry "$providerCountry"
                appId           "$appId"
                upc             "$upc"
                isrc            "$isrc"
                author          "$author"
                title           "$title"
                label           "$label"
                type            "$type"
                units           "$_units"
                royalty         "$_royalty"
                begin           "$begin"
                end             "$end"
                currency        "$currency"
                country         "$country"
                royaltyCurrency "$royaltyCurrency"
                preorder        "$preorder"
                seasonpass      "$seasonpass"
                isan            "$isan"
                appleid         "$appleid"
                price           "$_price"
                cma             "$cma"
                asset           "$asset"
                vendorCode      "$vendorCode"
                grid            "$grid"
                promoCode       "$promoCode"
                parentId        "$parentId"         )
        # Uncomment for some data debugging.
        #printf "\n\t%20s: %-20s" "${data[@]}"

        # Reset last* counters each day.
        if [[ $lastdate != $end ]]; then
            lastsales=
            lastfreesales=
            lastupgrades=
            lastfreeupgrades=
            (( ++day ))
            lastdate=$begin
        fi

        # TODO: Average these in an iteration from begin to end.
        units=$_units
        royalty=$_royalty
        price=$_price

        # Ignore non-Gorillas sales.
        [[ $appId = $appIdFilter ]] || continue

        # Record sale units and type.
        case $type in
            1)  (( lastsales        += units, sales         += units ))
                [[ $royalty = 0 ]] && \
                (( lastfreesales    += units, freesales     += units )) ;;

            7)  (( lastupgrades     += units, upgrades      += units ))
                [[ $royalty = 0 ]] && \
                (( lastfreeupgrades += units, freeupgrades  += units )) ;;
        esac

        # The rest is just for paid sales.
        [[ $royalty = 0 ]] && continue

        # Find the EUR value for our sale currency.
        toEur=0
        for i in ${!currencyCodes[@]}; do
            [[ ${currencyCodes[i]} = $royaltyCurrency ]] && {
                toEur=${toEurs[i]}
                currencyRoyalties[i]=$royalty
                (( currencyUnits[i] += units ))
                break
            }
        done
        [[ $toEur = 0 ]] && emit -y "Couldn't find EUR conversion for: $royaltyCurrency"

        # Record received royalties.
        eurRoyalty=$(bc <<< "$royalty * $units * $toEur")
        days[day]=$end
        royalties[day]=$(bc <<< "${royalties[day]:-0} + $eurRoyalty")

        # Record royalties per country.
        for i in ${!countryCodes[@]}; do
            [[ ${countryCodes[i]} = $country ]] && {
                countryRoyalties[i]=$(bc <<< "${countryRoyalties[i]:-0} + $eurRoyalty")
                (( ++countryUnits[i] ))
                i=-1
                break
            }
        done
        (( i != -1 || ! ${#countryCodes[@]} )) && {
            countryCodes+=("$country")
            countryRoyalties+=("$eurRoyalty")
            countryCurrencies+=("$royaltyCurrency")
            countryUnits+=(1)
        }

    done <<< "$data"

echo; echo
emit -n "$(printf "Upgrades: %6d | Delta: %6d${lastfreeupgrades:+\t(Free: %d, Payed: %d)}" "$upgrades" "$lastupgrades" ${lastfreeupgrades:+"$lastfreeupgrades" "$((lastupgrades - lastfreeupgrades))"})"$'\n'
emit -n "$(printf "Sales:    %6d | Delta: %6d${lastfreesales:+\t(Free: %d, Payed: %d)}" "$sales" "$lastsales" ${lastfreesales:+"$lastfreesales" "$((lastsales - lastfreesales))"})"$'\n'
emit -n "$(printf "Profit:   %6.2f | Delta: %6.2f\t(EUR)" "$(IFS=+; bc <<< "${royalties[*]}")" "${royalties[@]: -1}")"$'\n'

if (( ${#royalties[@]} )); then
    echo
    emit "Profit History:"
    sortedRoyalties=( $(printf '%s\n' "${royalties[@]}" | sort -n) )
    royaltyM=${sortedRoyalties[${#sortedRoyalties[@]} / 2]}
    royaltyQ3=${sortedRoyalties[${#sortedRoyalties[@]} * 3 / 4]}
    royaltyMax=${sortedRoyalties[${#sortedRoyalties[@]} - 1]}
    for day in "${!royalties[@]}"; do
        royalty=${royalties[day]%%.*}
        bar=$(printf '%*s' "$(bc <<< "${royalties[day]:-0} * ($(tput cols) - 30) / $royaltyMax")"); bar=${bar// /=}
        emit -n "$(printf "%10s:      %6.2f | %s" "${days[day]}" "${royalties[day]:-0}" "$bar")"$'\n'
    done
    emit "$(printf 'Average Profit: %6.2f - Median Profit: %6.2f - Q3 Profit: %6.2f - Max Profit: %6.2f' "$(bc <<< "scale=2; ($(IFS=+; echo "${royalties[*]}")) / ${#royalties[@]}.0")" "$royaltyM" "$royaltyQ3" "$royaltyMax")"

    echo
    emit "Currency breakdown:"
    for i in ${!currencyCodes[@]}; do
        (( ${currencyUnits[i]} )) || continue

        emit -n "$(printf "%s:      %6d ~ %5.2f: %6.2f\t(EUR, from %s)" "${currencyCodes[i]}" "${currencyUnits[i]}" "$(bc <<< "${currencyRoyalties[i]} * ${toEurs[i]}")" "$(bc <<< "${currencyRoyalties[i]} * ${currencyUnits[i]} * ${toEurs[i]}")" "${currencyNames[i]}")"$'\n'
    done
fi

echo
emit "Country breakdown:"
for i in ${!countryCodes[@]}; do
    emit -n "$(printf "%s:      %6d: %6.2f\t(EUR, from %s)" "${countryCodes[i]}" "${countryUnits[i]}" "${countryRoyalties[i]}" "${countryCurrencies[i]}")"$'\n'
done
